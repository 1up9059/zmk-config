 /*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define DVORAK 1
#define NUM 2
#define NAV 3
#define FUN 4

# define ______ &trans

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <NUM NAV>;
            then-layer = <FUN>;
        };
    };
    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;
            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp DOT>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp SEMI>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;
            mods = <(MOD_LSFT)>;
        };

        quote_dance: quote_tapdance {
           compatible = "zmk,behavior-tap-dance";
           #binding-cells = <0>;
           bindings = <&kp SQT>, <&kp DQT>;
        };

        dash_dance: dash_tapdance {
           compatible = "zmk,behavior-tap-dance";
           #binding-cells = <0>;
           bindings = <&kp MINUS>, <&kp UNDER>;
        };
      
        win_tab: win_or_tab {
           compatible = "zmk,behavior-tap-dance";
           #binding-cells = <0>;
           bindings = <&kp LGUI>, <&kp TAB>;
        };

        lt_gt: lt_or_gt {
           compatible = "zmk,behavior-tap-dance";
           #binding-cells = <0>;
           bindings = <&kp LT>, <&kp GT>;
        };

        tap_bkts: tap_bkts {
           compatible = "zmk,behavior-tap-dance";
           #binding-cells = <0>;
           bindings = <&kp LBKT>, <&kp RBKT>;
        }; 

        tap_par: tap_par {
           compatible = "zmk,behavior-tap-dance";
           #binding-cells = <0>;
           bindings = <&kp LPAR>, <&kp RPAR>;
        }; 
        tap_brc: tap_brc {
           compatible = "zmk,behavior-tap-dance";
           #binding-cells = <0>;
           bindings = <&kp LBRC>, <&kp RBRC>;
        }; 

    combos {
        compatible = "zmk,combos";

        open_paren_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <6 7>; // posiciones físicas de las teclas U e I
           bindings = <&kp  LPAR>;  // "("
        };
        close_paren_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <7 8>; // posiciones físicas de las teclas I e O
           bindings = <&kp  RPAR>;  // "("
        };
        open_lbkt_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <16 17>; // posiciones físicas de las teclas J e K
           bindings = <&kp  LBKT>;  // "]"
        };
        close_lbkt_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <17 18>; // posiciones físicas de las teclas K e L
           bindings = <&kp  RBKT>;  // "]"
        };
        OPEN_brc_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <26 27>; // posiciones físicas de las teclas K e L
           bindings = <&kp  LBRC>;  // "{"
        };
        close_brc_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <27 28>; // posiciones físicas de las teclas K e L
           bindings = <&kp  RBRC>;  // "}"
        };
        open_lt_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <1 2>; // posiciones físicas de las teclas K e L
           bindings = <&kp  LT>;  // "<"
        };
        close_lt_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <2 3>; // posiciones físicas de las teclas K e L
           bindings = <&kp  GT>;  // ">"
        };
        sum_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <3 4>; // posiciones físicas de las teclas K e L
           bindings = <&kp  PLUS>;  // "+"
        };
        minus_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <13 14>; // posiciones físicas de las teclas K e L
           bindings = <&kp  MINUS>;  // "-"
        };
        equal_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <23 24>; // posiciones físicas de las teclas K e L
           bindings = <&kp  EQUAL>;  // "="
        };
        equal_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <23 24>; // posiciones físicas de las teclas K e L
           bindings = <&kp  EQUAL>;  // "="
        };

        del_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <18 19>; // posiciones físicas de las teclas K e L
           bindings = <&kp  BSPC>;  // "BACKSPACE"
        };
        slash_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <0 1>; // posiciones físicas de las teclas K e L
           bindings = <&kp  FSLH>;  // "SLASH"
        };
        slash_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <10 11>; // posiciones físicas de las teclas K e L
           bindings = <&kp  BSLH>;  // "BACKSPACE"
        };

        pipe_combo {
           timeout-ms = <30>; // tiempo entre presiones (opcional)
           key-positions = <20 21>; // posiciones físicas de las teclas K e L
           bindings = <&kp  PIPE>;  // "BACKSPACE"
        };




      };



    };//final de todo
        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
        &kp Q         &kp W         &kp E         &kp R         &kp T             &kp Y         &kp U        &kp I         &kp O         &kp P   
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp A         &kp S         &kp D         &kp E         &kp G             &kp H         &kp J        &kp K         &kp L       &quote_dance
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
        &kp Z         &kp X         &kp C         &kp V         &kp B             &kp N         &kp M      &comma_semi   &dot_colon   &qmrk_excl
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                            &mt LSHIFT CAPSLOCK  &mo NUM    &mt LCTL ENTER    &mt RALT SPACE    &mo NAV     &win_tab
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                        >;
                };
                dvorak_layer { 
                        bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
    &quote_dance   &comma_semi   &dot_colon       &kp P         &kp Y              &kp F       &kp G        &kp C        &kp R          &kp L  
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
       &kp A         &kp O         &kp E         &kp U         &kp I              &kp D       &kp H        &kp T        &kp N          &kp S
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &qmrk_excl      &kp Q         &kp J         &kp K         &kp X              &kp B       &kp M        &kp W        &kp V          &kp Z
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                           &mt LSHIFT CAPSLOCK   &mo NUM    &mt LCTL ENTER    &mt RALT SPACE   &mo NAV     &win_tab
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                        >;
                };
                num_layer {
                        bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
      &kp N1        &kp N2        &kp N3        &kp N4        &kp N5           &kp N6          &kp N7        &kp N8       &kp N9       &kp N0
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT        &kp CARET       &kp AMPS      &kp STAR     &tap_par     &slh_morph
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp EQUAL     &kp GRAVE     &kp TILDE     &kp QMARK     &kp PLUS         &dash_dance     &lt_gt        &tap_brc     &tap_bkts     &kp PIPE
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                  &kp LSHIFT    ______      &mt LCTL ENTER    &mt RALT SPACE    &mo NAV     ______
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                        >;
                };

                nav_layer {
                        bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
       &kp ESC        ______        ______        ______        ______          &kp K_REDO     ______       ______        ______      ______
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp TAB      &sk LSHFT      &sk LCTRL      &sk LALT       &sk LGUI         &kp HOME      &kp END         &kp UP        &gresc       &kp BSPC
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &kp K_UNDO   &kp K_CUT      &kp K_COPY     &kp K_PASTE    &kp DEL          ______      &kp LEFT      &kp DOWN      &kp RIGHT        ______
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                    ______        &mo NUM        ______            ______        ______        ______
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                        >;
                };

                fun_layer {
                        bindings = <
// ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮   ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
     &kp F1         &kp F2        &kp F3       &kp F4        &kp F5               &kp F6       &kp F7        &kp F8        &kp F9       &kp F12
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
     &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4         &kp F10      &kp F11       &kp F12     &tog DVORAK     &to DEFAULT
// ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
      &bt BT_CLR    &kp C_PREV     &kp C_PP     &kp C_NEXT   &out OUT_BLE      &kp K_MUTE    &kp C_VOL_DN  &kp C_VOL_UP  &out OUT_USB  &bt BT_CLR
// ╰─────────────┴─────────────┼─────────────┼─────────────┼─────────────┤   ├─────────────┼─────────────┼─────────────┼─────────────┴─────────────╯
                                    ______        ______        ______            ______        ______        ______
//                             ╰─────────────┴─────────────┴─────────────╯   ╰─────────────┴─────────────┴─────────────╯
                        >;
                };
        };
};
